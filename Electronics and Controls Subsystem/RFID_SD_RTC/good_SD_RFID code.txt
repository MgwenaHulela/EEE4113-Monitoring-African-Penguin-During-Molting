#include <SPI.h>
#include <SD.h>
#include <MFRC522.h>

// Pin definitions
#define SD_CS 5
#define RFID_CS 15
#define RST_PIN 27
#define SPI_SCK 18
#define SPI_MISO 19
#define SPI_MOSI 23

MFRC522 mfrc522(RFID_CS, RST_PIN); // Create MFRC522 instance

bool writeLog(const String& message) {
  digitalWrite(RFID_CS, HIGH);
  digitalWrite(SD_CS, LOW);

  File logFile = SD.open("/log.txt", FILE_APPEND);
  if (!logFile) {
    Serial.println("❌ ERROR: Could not open log.txt for appending");
    digitalWrite(SD_CS, HIGH);
    return false;
  }

  logFile.println(message);
  logFile.flush();
  logFile.close();
  Serial.println("✅ Log written to log.txt");

  digitalWrite(SD_CS, HIGH);
  return true;
}

void readLastNLines(const char* filename, int n) {
  Serial.println("📖 Reading last 5 entries from log.txt...");
  File file = SD.open(filename);
  if (!file) {
    Serial.println("❌ ERROR: Failed to open log file for reading");
    return;
  }

  const int MAX_LINES = 100;
  String lines[MAX_LINES];
  int count = 0;

  while (file.available()) {
    String line = file.readStringUntil('\n');
    if (line.length() > 0) {
      lines[count % MAX_LINES] = line;
      count++;
    }
  }
  file.close();

  int start = max(0, count - n);
  for (int i = start; i < count; i++) {
    Serial.println("▶ " + lines[i % MAX_LINES]);
  }
  Serial.println("✅ Finished reading last 5 entries.");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("🔧 Initializing system...");

  pinMode(SD_CS, OUTPUT);
  pinMode(RFID_CS, OUTPUT);
  digitalWrite(SD_CS, HIGH);
  digitalWrite(RFID_CS, HIGH);

  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  Serial.println("✅ Shared SPI bus configured");

  mfrc522.PCD_Init();
  Serial.println("✅ RFID module initialized");

  if (!SD.begin(SD_CS)) {
    Serial.println("❌ ERROR: SD card initialization failed!");
    return;
  }
  Serial.println("✅ SD card initialized");

  if (!SD.exists("/log.txt")) {
    File logFile = SD.open("/log.txt", FILE_WRITE);
    if (logFile) {
      logFile.println("🔓 Log created.");
      logFile.close();
      Serial.println("✅ log.txt created");
    } else {
      Serial.println("❌ ERROR: Could not create log.txt");
    }
  }

  Serial.println("🔧 Setup complete ▶ awaiting RFID or timeout");
}

void loop() {
  Serial.println("⏳ Waiting for RFID tag (5s timeout)...");
  unsigned long start = millis();
  bool tagDetected = false;
  String uidString = "";

  while (millis() - start < 5000) {
    if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) continue;

    uidString = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      if (mfrc522.uid.uidByte[i] < 0x10) uidString += "0";
      uidString += String(mfrc522.uid.uidByte[i], HEX);
      if (i < mfrc522.uid.size - 1) uidString += ":";
    }

    uidString.toLowerCase();
    Serial.print("📛 Tag detected ▶ UID=");
    Serial.println(uidString);

    tagDetected = true;
    mfrc522.PICC_HaltA();
    break;
  }

  if (tagDetected) {
    String logMsg = "RFID Tag Detected ▶ UID=" + uidString;
    if (writeLog(logMsg)) {
      delay(1000); // Give time for write
      readLastNLines("/log.txt", 5);
    }
  }

  delay(2000); // Wait before next cycle
}
